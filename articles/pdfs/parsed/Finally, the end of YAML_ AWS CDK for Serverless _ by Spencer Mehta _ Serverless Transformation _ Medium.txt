
# Finally, the end of YAML? AWS CDK for Serverless

## The AWS Cloud Development Kit (CDK) 
The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.

## What is Infrastructure as Code?
Infrastructure as Code (IaC) is a discrete representation of all the various resources that our cloud application will use, in machine readable definition files. The main benefits this offers are:
- Version control via git
- Single source of truth
- Reusability — e.g. easy to deploy several production-like environments
- Typing — allowing suggestions and autocomplete
- Testing of the IaC

## Why CDK?
IaC is not a new concept, and there are many options to choose from, including Serverless Framework, Terraform, CloudFormation and AWS SAM. One of the unique features of CDK compared to these others is that it allows us to write IaC in imperative programming languages such as TypeScript and Python, rather than declarative ones such as YAML or JSON. The expressive power of these languages and their ubiquitous support by code editors, formatters, syntax checkers and linters is leagues ahead of support for any YAML-based IaC. This makes the development experience more approachable and rapid, as many errors can be caught by static checks performed by the editor. The code is also more easily readable and comprehensible to developers written in these familiar languages than in YAML.

This CDK code is transpiled into CloudFormation templates, AWS’s YAML or JSON IaC format. During this ‘synth’ process, further errors in the IaC can be caught — I like to think of these like compile-time errors in compiled languages like C or Rust. This means we don’t have to wait for a failed deployment to catch such errors, saving the developers time.

## CDK deploy process
This is in contrast to Terraform’s API-based approach, where infrastructure is provisioned in a cloud provider agnostic language, and then plugins are used to interact with Cloud and SaaS providers. The benefit of this approach is migration between cloud providers does not require a complete rewrite of the IaC. However, with serverless architectures we’re likely already buying into cloud-provider-specific constructs. Terraform have also released ‘CDK for Terraform’, which is an AWS CDK equivalent that transpiles to Terraform rather than CloudFormation. However, this is currently less mature than AWS CDK.

CDK additionally provides libraries to write assertion and validation tests with familiar testing tools such as jest, further moving the point at which errors are caught to earlier in the development cycle. CDK also adopts the paradigm of encapsulation with its ‘constructs’. This allows you to wrap specific resource provisioning into a simple, reusable package that can be used again elsewhere.

## Installation
A pre-requisite is to have the AWS CLI installed and configured with an appropriate account. Once you’ve done this, you can install CDK using `npm i -g cdk` - this will install it globally on your machine. We’re going to start a new project from scratch using CDK’s TypeScript template. Create a new `cdk-demo` directory and execute `cdk init app --language typescript` inside it.

## The basics
There are a couple main files to go over here. Firstly, `lib/cdk-demo-stack.ts` creates our first CDK stack. A stack corresponds to a CloudFormation template, which provisions the resources needed for our applications and services.

Next, we have `bin/cdk-demo.ts`, which defines our CDK app. An app can contain multiple stacks, and modularising our services into stacks decouples their deployments. This means if we make changes to only one stack we only need to worry about redeploying this stack.

```typescript
env: { region: 'eu-west-1' }
```

## Creating a Lambda
Let's first create a `lambdas` directory to store our code. Inside this, we'll create `getLunchSpots.ts` containing the following:

```typescript
// This creates a simple handler that returns a 200 response with the serialised lunchSpots object
```

## Adding to the Stack
Now we’ll create a Lambda resource in our stack directly from our TypeScript handler function. Add the following code to the stack file:

```typescript
// This creates a Node.js Lambda function with the name ‘getLunchSpots’, using the handler function found in lambdas/getLunchSpots.ts
```

## Deployment
To deploy our changes, we can simply run `cdk deploy`. You may get a prompt asking to enter 'y' to confirm deployment of the changes. Near the end of the deployment script's terminal output you should see an 'Outputs' section with an entry 'CdkDemoStack.sohoLunchSpotsEndpoint...'. This is the endpoint of our API Gateway API. If we make a GET request to this url + /lunch-spots, we'll see the JSON object we specified in our Lambda function returned.

## Testing
We’ll also add a short test to make sure our Lambda function was created as expected. Open up `test/cdk-demo.test.ts` and change the code to the following:

```typescript
// This test creates a template from our stack and performs and assertion test on the template to ensure it has a Lambda function
```

## Summary
And that’s it! In just a few lines of code we’ve created, provisioned, deployed, and tested a service on scalable cloud infrastructure! If you’re interested in learning more about CDK, I can strongly recommend the CDK Workshop for a practical guide.
