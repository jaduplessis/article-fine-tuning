## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## Introduction
## Architecture
## DynamoDB
## GraphQL Explained
## Queries
## Mutations
## Subscriptions
## Resolvers
## Pipeline Resolvers
## Cost
### Tips and Tricks
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## Introduction
## Architecture
## DynamoDB
## GraphQL Explained
## Queries
## Mutations
## Subscriptions
## Resolvers
## Pipeline Resolvers
## Cost
### Tips and Tricks
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
# serverless.yml
# ...
# Serverless webhooks with Lift
## webhooks: stripe
## Introduction
## Architecture
## DynamoDB
## GraphQL Explained
## Queries
## Mutations
## Subscriptions
## Resolvers
## Pipeline Resolvers
## Cost
### Tips and Tricks
## We want our Cloud teams to be secure, fast, stable, reactive, autonomous and of course… happy & fulfilled! However, this isn’t always the case…
## Rethinking Security
## Cognitive Load
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
#### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
## DynamoDB Streams
### Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
### SQS
## How could the Architecture be Improved?
### Filtering Options
### Best Practice
## Future Improvements to Pipes
## Summary
## The AWS Cloud Development Kit (CDK) is a framework that lets you define your Cloud Application resources using familiar programming languages such as TypeScript or Python. This allows developers familiar with these languages to apply their existing knowledge and get to grips with building Cloud infrastructure rapidly. By using provided high-level components, built with best practices as default, we can abstract much of the complexity away from the developer, and by encapsulating resources into constructs we can continue this practice as our resources scale in size and complexity.
### What is Infrastructure as Code?
### Why CDK?
### CDK deploy process
### Installation
### The basics
## Creating a Lambda
## What is LocalStack
## AWS services offered by LocalStack
## Installation
## pip install localstack
## Example 1 - Creating S3 bucket
## Copy a test.txt file to the bucket
## Example 2 - Host a static website
## The states which make up a Step Function
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## The Code
## Final thoughts
## Current observability solutions in Serverless
## Fair Warning
## The pieces that make up a Cloudwatch Dashboard
## Creating a Metric
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
## Serverless will be the enabler for Edge
## The naive approach
### Simple webhook endpoint architecture
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
### Production-ready serverless webhook endpoint architecture
# serverless.yml
# ...
# You can use native Serverless framework functionalities to define your processors
# But you need raw Cloudformation to define API Gateway integration to EventBridge
## Introduction
## Architecture
## DynamoDB
## GraphQL Explained
## Queries
## Mutations
## Subscriptions
## Resolvers
## Pipeline Resolvers
## Frontend — Amplify & Apollo Client
## Cost
## Rethinking Security
### Security as “Top Down” Blocker
## Cognitive Load
### Cognitive Load: The amount of working memory being used
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
### DynamoDB Streams
## Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
## The AWS Cloud Development Kit (CDK) 
## What is Infrastructure as Code?
## Why CDK?
## CDK deploy process
## Installation
## The basics
## Creating a Lambda
## Adding to the Stack
## Deployment
## Testing
## What is LocalStack
### How can it help us as a developer?
## AWS services offered by LocalStack
### Installation
### Example 1 - Creating S3 bucket
### Example 2 - Host a static website
## The states which make up a Step Function
## Should we test Step Functions?
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
### Assert that the state machine has the correct execution status
### Now let’s check we get the right output given a valid input
### Putting it all together
## What is an ACL?
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## Final Thoughts
## Current observability solutions in Serverless
## Fair Warning
## Creating a Metric
### Default Metrics
### Creating the Data Point:
### Creating the Metric:
### Creating a Dashboard & Widget
## Creating an Alarm
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
### Lambda@Edge — Serverless services are already at the Edge
# Serverless.yml file definition for a single Lambda@Edge function — the complete IaC template needed.
### Firecracker — solving many challenges for Serverless that Edge computing will face
## The naive approach
### Simple webhook endpoint architecture
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
### Production-ready serverless webhook endpoint architecture
# serverless.yml
# ...
# You can use native Serverless framework functionalities to define your processors
# But you need raw Cloudformation to define API Gateway integration to EventBridge
## Introduction
## Architecture
## DynamoDB
## GraphQL Explained
## Queries
## Mutations
## Subscriptions
## Resolvers
## Pipeline Resolvers
## Frontend — Amplify & Apollo Client
## Cost
## Rethinking Security
### Security as “Top Down” Blocker
## Cognitive Load
### Cognitive Load: The amount of working memory being used
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
### DynamoDB Streams
## Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
## The AWS Cloud Development Kit (CDK) 
## What is Infrastructure as Code?
## Why CDK?
## CDK deploy process
## Installation
## The basics
## Creating a Lambda
## Adding to the Stack
## Deployment
## Testing
## What is LocalStack
### How can it help us as a developer?
## AWS services offered by LocalStack
### Installation
### Example 1 - Creating S3 bucket
### Example 2 - Host a static website
## The states which make up a Step Function
## Should we test Step Functions?
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
### Assert that the state machine has the correct execution status
### Now let’s check we get the right output given a valid input
### Putting it all together
## What is an ACL?
## ACL as a Service:
## Building Blocks of an ACL:
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## Final Thoughts
## Current observability solutions in Serverless
## Fair Warning
## Creating a Metric
### Default Metrics
### Creating the Data Point:
### Creating the Metric:
### Creating a Dashboard & Widget
## Creating an Alarm
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
### Lambda@Edge — Serverless services are already at the Edge
# Serverless.yml file definition for a single Lambda@Edge function — the complete IaC template needed.
### Firecracker — solving many challenges for Serverless that Edge computing will face
## Introduction
## Architecture
## DynamoDB
## GraphQL Explained
## Queries
## Mutations
## Subscriptions
## Resolvers
## Pipeline Resolvers
## Frontend — Amplify & Apollo Client
## Cost
## Rollback surprises
## A tax on productivity
## They are not as safe as you think
## Prefer a permissive role that is hard to abuse
## Service Control Policies (SCPs)
## Attribute-Based Access Control (ABAC)
## A permissive CI/CD role
## Lambda pros
## Lambda cons
## Step Functions pros
## Step Functions cons
## AWS Kinesis and Lambda are a great combo for processing large amounts of data in real-time. However, there’s a common oversight that many developers make when integrating these two services.
## Hydrating event data
## Function URL pros
## Function URL cons
### Where Function URL makes sense
## API Gateway pros
## API Gateway cons
## When API Gateway makes sense
## Serverless Advantage
## Data Security
## Features
### Easy Model Selection
### Agents
## Fine-Tuning
## Bedrock over OpenAI?
## The naive approach
### Simple webhook endpoint architecture
# serverless.yml
# ...
## The missing characteristics of a good webhook design
## A production-ready approach
### Production-ready serverless webhook endpoint architecture
# serverless.yml
# ...
# You can use native Serverless framework functionalities to define your processors
# But you need raw Cloudformation to define API Gateway integration to EventBridge
## Introduction
## Architecture
## DynamoDB
## GraphQL Explained
## Queries
## Mutations
## Subscriptions
## Resolvers
## Pipeline Resolvers
## Frontend — Amplify & Apollo Client
## Cost
## Generating snapshot images from a PDF
## In jest
## Setting up the browser for jest
## Rethinking Security
### Security as “Top Down” Blocker
## Cognitive Load
### Cognitive Load: The amount of working memory being used
## CDK — The Enabling Technology
### What is CDK?
#### The Construct Hierarchy
### Baked-In Best Practices — L2+
## Not a Compliance Panacea
## Example Application
## What are Pipes?
## How are EventBridge Pipes different from EventBridge Buses?
## Why use Pipes?
## Building the Architecture
### DynamoDB Streams
## Infrastructure as Code (IaC)
### DynamoDB
### Lambdas
## Introduction
## Foundational Model Training / Selection
## Fine Tuning
## Hosting
## Application
## Context Embeddings
## The AWS Cloud Development Kit (CDK) 
## What is Infrastructure as Code?
## Why CDK?
## CDK deploy process
## Installation
## The basics
## Creating a Lambda
## Adding to the Stack
## Deployment
## Testing
## What is LocalStack
### How can it help us as a developer?
## AWS services offered by LocalStack
### Installation
### Example 1 - Creating S3 bucket
### Example 2 - Host a static website
## Can’t you just use a VPC endpoint?
## No resource policy
## Service Control Policies (SCPs)
## The naive approach
# Example configuration here
### Problems with the naive approach
## A production-ready approach
# serverless.yml
## The states which make up a Step Function
## Should we test Step Functions?
## Unit vs Integration Testing
## Introducing Step Functions assertions with sls-test-tools
### Assert that the state machine has the correct execution status
### Now let’s check we get the right output given a valid input
### Putting it all together
## What is an ACL?
## ACL as a Service:
## Building Blocks of an ACL:
## How the problem arises
## Hexagonal Architecture To The Rescue
## Where Should Cross-Cutting Infrastructure Dependencies Live?
## Auto-Scaffolding Dev and Test “Adapters”
## The Emergence of Prompt-Centric Applications and the Need for Testing
## Defining Test Cases and Generating Test Prompts
## Evaluating the Quality of AI Responses
## Generalizing the Test Pipeline
## What is Image Object Detection?
## Our Use Case
## Image Analysis using Deep Learning
## What is Amazon Rekognition?
## Architecture
## Final Thoughts
## Current observability solutions in Serverless
## Fair Warning
## Creating a Metric
### Default Metrics
### Creating the Data Point:
### Creating the Metric:
### Creating a Dashboard & Widget
## Creating an Alarm
## On the Edge
## What is Serverless?
## Real World Edge Computing
## Worlds Collide — The Serverless Edge… CentreLess?
### Lambda@Edge — Serverless services are already at the Edge
# Serverless.yml file definition for a single Lambda@Edge function — the complete IaC template needed.
### Firecracker — solving many challenges for Serverless that Edge computing will face
## TL;DR
### Automated Typescript definitions generation pipeline
## KEY POINT
## What is an event-driven architecture
### Event-driven architectures communicate asynchronously
### Event-driven architectures communicate via events
## What is event-based compute
## Implications of event-based compute
## Product-level takeaways from the DynamoDB Paper
### The importance of consistent performance
### Fully managed over self-managed
### User data isn't as evenly distributed as you want
## Technical takeaways from the DynamoDB Paper
### Using log replicas to improve durability and availability
### Decoupling partitions from throughput
## My Background and Preferences
## Why I like the Serverless Framework
### A standard structure for every application
### The Serverless Framework abstracts the right things
### The CDK abstracts the wrong things
## How DynamoDB pricing works
## Using DynamoDB Transactions doubles your WCU usage
## Choosing between provisioned and on-demand
## Doin' the math pt. 1: Tracking view counts
## Doin' the math pt. 2: Do I really need that secondary index?
## How you should think about DynamoDB costs | DeBrie Advisory
## Doin' the math pt. 3: Complex filtering
## What are the benefits of GraphQL?
### API type safety
### Fewer network requests from the frontend
### Flexible querying patterns
## Key takeaways
## DynamoDB and GraphQL
### Background on DynamoDB
## The case for (and against) single-table design with GraphQL
